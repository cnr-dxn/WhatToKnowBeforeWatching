sealed trait NumList
case object Nil extends NumList
case class Cons(n: Int, l: NumList) extends NumList 

/*-- Define NumOption data type first --*/
// YOUR CODE HERE
sealed trait NumOption
case object None extends NumOption
case class Some(n: Int) extends NumOption

/*-- Next, implement this function: see problem description for specification --*/
def getNthElement(lst: NumList, n: Int): NumOption = {
    // YOUR CODE HERE
    if (n < 0) {
        throw new IllegalArgumentException("the number cannot be less than zero.")
    }
    else if (n <= 1) {
        println(s"    - in the n <= 1 thing, n == $n, lst = $lst")
        n match {
            case 0 => lst match {case Cons(num, list) => println(s"      - in the (case 0) n == conditional thing, GOING TO RETURN num == $num, list == $list"); return Some(num)}
            case 1 => lst match {case Cons(num, list) => println(s"      - in the (case 1) else case, lst = $lst, n = $n, "); return getNthElement(list, n-1)}
        }
        println(s"    - exiting the if statement:")
        println(s"    - lst = $lst:")
        println(s"    - n = $n:")
    }
    else {
        lst match {
            case Nil => println(" - in the nil case"); return None
            case Cons(num, list) => println(s" - entering the else case, lst = $lst, n = $n, "); return getNthElement(list, n-1)
        }
    }
    println("well shit")
    Some(999)
}
